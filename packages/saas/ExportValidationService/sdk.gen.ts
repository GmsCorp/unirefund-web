// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetApiExportValidationServiceExportValidationData, GetApiExportValidationServiceExportValidationResponse, GetApiExportValidationServiceExportValidationByIdData, GetApiExportValidationServiceExportValidationByIdResponse, PutApiExportValidationServiceExportValidationByIdData, PutApiExportValidationServiceExportValidationByIdResponse, DeleteApiExportValidationServiceExportValidationByIdData, DeleteApiExportValidationServiceExportValidationByIdResponse } from './types.gen';

export class ExportValidationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** ExportValidationService.ExportValidations, ExportValidationService.ExportValidations.ViewList
     * @param data The data for the request.
     * @param data.referenceId
     * @param data.tagIds
     * @param data.tagNumbers
     * @param data.exportStartDate
     * @param data.exportEndDate
     * @param data.stampTypeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiExportValidationServiceExportValidation(data: GetApiExportValidationServiceExportValidationData = {}): CancelablePromise<GetApiExportValidationServiceExportValidationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/export-validation-service/export-validation',
            query: {
                ReferenceId: data.referenceId,
                TagIds: data.tagIds,
                TagNumbers: data.tagNumbers,
                ExportStartDate: data.exportStartDate,
                ExportEndDate: data.exportEndDate,
                StampTypeCodes: data.stampTypeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** ExportValidationService.ExportValidations, ExportValidationService.ExportValidations.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiExportValidationServiceExportValidationById(data: GetApiExportValidationServiceExportValidationByIdData): CancelablePromise<GetApiExportValidationServiceExportValidationByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/export-validation-service/export-validation/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** ExportValidationService.ExportValidations, ExportValidationService.ExportValidations.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiExportValidationServiceExportValidationById(data: PutApiExportValidationServiceExportValidationByIdData): CancelablePromise<PutApiExportValidationServiceExportValidationByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/export-validation-service/export-validation/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** ExportValidationService.ExportValidations, ExportValidationService.ExportValidations.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiExportValidationServiceExportValidationById(data: DeleteApiExportValidationServiceExportValidationByIdData): CancelablePromise<DeleteApiExportValidationServiceExportValidationByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/export-validation-service/export-validation/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}