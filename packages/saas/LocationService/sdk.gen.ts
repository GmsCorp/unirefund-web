// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetApiLocationServiceAddressCommonDataByIdData, GetApiLocationServiceAddressCommonDataByIdResponse, PutApiLocationServiceAddressCommonDataByIdData, PutApiLocationServiceAddressCommonDataByIdResponse, DeleteApiLocationServiceAddressCommonDataByIdData, DeleteApiLocationServiceAddressCommonDataByIdResponse, GetApiLocationServiceAddressCommonDataData, GetApiLocationServiceAddressCommonDataResponse, PostApiLocationServiceAddressCommonDataData, PostApiLocationServiceAddressCommonDataResponse, GetApiLocationServiceAddressCommonDataGetListWithIdsData, GetApiLocationServiceAddressCommonDataGetListWithIdsResponse, GetApiLocationServiceCitiesData, GetApiLocationServiceCitiesResponse, PostApiLocationServiceCitiesData, PostApiLocationServiceCitiesResponse, GetApiLocationServiceCitiesGetListByRegionByRegionIdData, GetApiLocationServiceCitiesGetListByRegionByRegionIdResponse, GetApiLocationServiceCitiesGetListByCountryByCountryIdData, GetApiLocationServiceCitiesGetListByCountryByCountryIdResponse, GetApiLocationServiceCitiesByIdData, GetApiLocationServiceCitiesByIdResponse, PutApiLocationServiceCitiesByIdData, PutApiLocationServiceCitiesByIdResponse, DeleteApiLocationServiceCitiesByIdData, DeleteApiLocationServiceCitiesByIdResponse, GetApiLocationServiceCountriesData, GetApiLocationServiceCountriesResponse, PostApiLocationServiceCountriesData, PostApiLocationServiceCountriesResponse, GetApiLocationServiceCountriesByIdData, GetApiLocationServiceCountriesByIdResponse, PutApiLocationServiceCountriesByIdData, PutApiLocationServiceCountriesByIdResponse, DeleteApiLocationServiceCountriesByIdData, DeleteApiLocationServiceCountriesByIdResponse, GetApiLocationServiceCountryDatesData, GetApiLocationServiceCountryDatesResponse, PostApiLocationServiceCountryDatesData, PostApiLocationServiceCountryDatesResponse, GetApiLocationServiceCountryDatesByIdData, GetApiLocationServiceCountryDatesByIdResponse, PutApiLocationServiceCountryDatesByIdData, PutApiLocationServiceCountryDatesByIdResponse, DeleteApiLocationServiceCountryDatesByIdData, DeleteApiLocationServiceCountryDatesByIdResponse, GetApiLocationServiceCountryNumbersData, GetApiLocationServiceCountryNumbersResponse, PostApiLocationServiceCountryNumbersData, PostApiLocationServiceCountryNumbersResponse, GetApiLocationServiceCountryNumbersByIdData, GetApiLocationServiceCountryNumbersByIdResponse, PutApiLocationServiceCountryNumbersByIdData, PutApiLocationServiceCountryNumbersByIdResponse, DeleteApiLocationServiceCountryNumbersByIdData, DeleteApiLocationServiceCountryNumbersByIdResponse, GetApiLocationServiceCountryTimesData, GetApiLocationServiceCountryTimesResponse, PostApiLocationServiceCountryTimesData, PostApiLocationServiceCountryTimesResponse, GetApiLocationServiceCountryTimesByIdData, GetApiLocationServiceCountryTimesByIdResponse, PutApiLocationServiceCountryTimesByIdData, PutApiLocationServiceCountryTimesByIdResponse, DeleteApiLocationServiceCountryTimesByIdData, DeleteApiLocationServiceCountryTimesByIdResponse, GetApiLocationServiceCurrenciesData, GetApiLocationServiceCurrenciesResponse, PostApiLocationServiceCurrenciesData, PostApiLocationServiceCurrenciesResponse, GetApiLocationServiceCurrenciesByIdData, GetApiLocationServiceCurrenciesByIdResponse, PutApiLocationServiceCurrenciesByIdData, PutApiLocationServiceCurrenciesByIdResponse, DeleteApiLocationServiceCurrenciesByIdData, DeleteApiLocationServiceCurrenciesByIdResponse, GetApiLocationServiceDistrictsData, GetApiLocationServiceDistrictsResponse, PostApiLocationServiceDistrictsData, PostApiLocationServiceDistrictsResponse, GetApiLocationServiceDistrictsGetListByCityByCityIdData, GetApiLocationServiceDistrictsGetListByCityByCityIdResponse, GetApiLocationServiceDistrictsByIdData, GetApiLocationServiceDistrictsByIdResponse, PutApiLocationServiceDistrictsByIdData, PutApiLocationServiceDistrictsByIdResponse, DeleteApiLocationServiceDistrictsByIdData, DeleteApiLocationServiceDistrictsByIdResponse, GetApiLocationServiceNeighborhoodsData, GetApiLocationServiceNeighborhoodsResponse, PostApiLocationServiceNeighborhoodsData, PostApiLocationServiceNeighborhoodsResponse, GetApiLocationServiceNeighborhoodsGetListByDistrictByDistrictIdData, GetApiLocationServiceNeighborhoodsGetListByDistrictByDistrictIdResponse, GetApiLocationServiceNeighborhoodsByIdData, GetApiLocationServiceNeighborhoodsByIdResponse, PutApiLocationServiceNeighborhoodsByIdData, PutApiLocationServiceNeighborhoodsByIdResponse, DeleteApiLocationServiceNeighborhoodsByIdData, DeleteApiLocationServiceNeighborhoodsByIdResponse, GetApiLocationServiceRegionsData, GetApiLocationServiceRegionsResponse, PostApiLocationServiceRegionsData, PostApiLocationServiceRegionsResponse, GetApiLocationServiceRegionsGetListByCountryByCountryIdData, GetApiLocationServiceRegionsGetListByCountryByCountryIdResponse, GetApiLocationServiceRegionsByIdData, GetApiLocationServiceRegionsByIdResponse, PutApiLocationServiceRegionsByIdData, PutApiLocationServiceRegionsByIdResponse, DeleteApiLocationServiceRegionsByIdData, DeleteApiLocationServiceRegionsByIdResponse, GetApiLocationServiceRegionsGetDefaultRegionIdByCountryIdData, GetApiLocationServiceRegionsGetDefaultRegionIdByCountryIdResponse, GetApiLocationServiceRegionalSettingsData, GetApiLocationServiceRegionalSettingsResponse, PostApiLocationServiceRegionalSettingsData, PostApiLocationServiceRegionalSettingsResponse, GetApiLocationServiceRegionalSettingsByIdData, GetApiLocationServiceRegionalSettingsByIdResponse, PutApiLocationServiceRegionalSettingsByIdData, PutApiLocationServiceRegionalSettingsByIdResponse, DeleteApiLocationServiceRegionalSettingsByIdData, DeleteApiLocationServiceRegionalSettingsByIdResponse } from './types.gen';

export class AddressCommonDataService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.AddressCommonDatas, LocationService.AddressCommonDatas.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceAddressCommonDataById(data: GetApiLocationServiceAddressCommonDataByIdData): CancelablePromise<GetApiLocationServiceAddressCommonDataByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/address-common-data/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.AddressCommonDatas, LocationService.AddressCommonDatas.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceAddressCommonDataById(data: PutApiLocationServiceAddressCommonDataByIdData): CancelablePromise<PutApiLocationServiceAddressCommonDataByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/address-common-data/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.AddressCommonDatas, LocationService.AddressCommonDatas.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceAddressCommonDataById(data: DeleteApiLocationServiceAddressCommonDataByIdData): CancelablePromise<DeleteApiLocationServiceAddressCommonDataByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/address-common-data/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.AddressCommonDatas, LocationService.AddressCommonDatas.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceAddressCommonData(data: GetApiLocationServiceAddressCommonDataData = {}): CancelablePromise<GetApiLocationServiceAddressCommonDataResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/address-common-data',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.AddressCommonDatas, LocationService.AddressCommonDatas.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceAddressCommonData(data: PostApiLocationServiceAddressCommonDataData = {}): CancelablePromise<PostApiLocationServiceAddressCommonDataResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/address-common-data',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.AddressCommonDatas, LocationService.AddressCommonDatas.ViewListByIds
     * @param data The data for the request.
     * @param data.ids
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceAddressCommonDataGetListWithIds(data: GetApiLocationServiceAddressCommonDataGetListWithIdsData = {}): CancelablePromise<GetApiLocationServiceAddressCommonDataGetListWithIdsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/address-common-data/get-list-with-ids',
            query: {
                ids: data.ids
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CityService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Cities, LocationService.Cities.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCities(data: GetApiLocationServiceCitiesData = {}): CancelablePromise<GetApiLocationServiceCitiesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/cities',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Cities, LocationService.Cities.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceCities(data: PostApiLocationServiceCitiesData = {}): CancelablePromise<PostApiLocationServiceCitiesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/cities',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Cities, LocationService.Cities.ViewListByRegionId
     * @param data The data for the request.
     * @param data.regionId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCitiesGetListByRegionByRegionId(data: GetApiLocationServiceCitiesGetListByRegionByRegionIdData): CancelablePromise<GetApiLocationServiceCitiesGetListByRegionByRegionIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/cities/get-list-by-region/{regionId}',
            path: {
                regionId: data.regionId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Cities, LocationService.Cities.ViewListByCountryId
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCitiesGetListByCountryByCountryId(data: GetApiLocationServiceCitiesGetListByCountryByCountryIdData): CancelablePromise<GetApiLocationServiceCitiesGetListByCountryByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/cities/get-list-by-country/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Cities, LocationService.Cities.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCitiesById(data: GetApiLocationServiceCitiesByIdData): CancelablePromise<GetApiLocationServiceCitiesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/cities/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Cities, LocationService.Cities.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceCitiesById(data: PutApiLocationServiceCitiesByIdData): CancelablePromise<PutApiLocationServiceCitiesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/cities/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Cities, LocationService.Cities.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceCitiesById(data: DeleteApiLocationServiceCitiesByIdData): CancelablePromise<DeleteApiLocationServiceCitiesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/cities/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CountryService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Countries, LocationService.Countries.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountries(data: GetApiLocationServiceCountriesData = {}): CancelablePromise<GetApiLocationServiceCountriesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/countries',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Countries, LocationService.Countries.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceCountries(data: PostApiLocationServiceCountriesData = {}): CancelablePromise<PostApiLocationServiceCountriesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/countries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Countries, LocationService.Countries.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountriesById(data: GetApiLocationServiceCountriesByIdData): CancelablePromise<GetApiLocationServiceCountriesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/countries/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Countries, LocationService.Countries.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceCountriesById(data: PutApiLocationServiceCountriesByIdData): CancelablePromise<PutApiLocationServiceCountriesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/countries/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Countries, LocationService.Countries.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceCountriesById(data: DeleteApiLocationServiceCountriesByIdData): CancelablePromise<DeleteApiLocationServiceCountriesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/countries/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CountryDateService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountryDates(data: GetApiLocationServiceCountryDatesData = {}): CancelablePromise<GetApiLocationServiceCountryDatesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/country-dates',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceCountryDates(data: PostApiLocationServiceCountryDatesData = {}): CancelablePromise<PostApiLocationServiceCountryDatesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/country-dates',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountryDatesById(data: GetApiLocationServiceCountryDatesByIdData): CancelablePromise<GetApiLocationServiceCountryDatesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/country-dates/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceCountryDatesById(data: PutApiLocationServiceCountryDatesByIdData): CancelablePromise<PutApiLocationServiceCountryDatesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/country-dates/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceCountryDatesById(data: DeleteApiLocationServiceCountryDatesByIdData): CancelablePromise<DeleteApiLocationServiceCountryDatesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/country-dates/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CountryNumberService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.CountryNumbers, LocationService.CountryNumbers.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountryNumbers(data: GetApiLocationServiceCountryNumbersData = {}): CancelablePromise<GetApiLocationServiceCountryNumbersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/country-numbers',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.CountryNumbers, LocationService.CountryNumbers.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceCountryNumbers(data: PostApiLocationServiceCountryNumbersData = {}): CancelablePromise<PostApiLocationServiceCountryNumbersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/country-numbers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.CountryNumbers, LocationService.CountryNumbers.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountryNumbersById(data: GetApiLocationServiceCountryNumbersByIdData): CancelablePromise<GetApiLocationServiceCountryNumbersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/country-numbers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.CountryNumbers, LocationService.CountryNumbers.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceCountryNumbersById(data: PutApiLocationServiceCountryNumbersByIdData): CancelablePromise<PutApiLocationServiceCountryNumbersByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/country-numbers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.CountryNumbers, LocationService.CountryNumbers.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceCountryNumbersById(data: DeleteApiLocationServiceCountryNumbersByIdData): CancelablePromise<DeleteApiLocationServiceCountryNumbersByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/country-numbers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CountryTimeService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountryTimes(data: GetApiLocationServiceCountryTimesData = {}): CancelablePromise<GetApiLocationServiceCountryTimesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/country-times',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceCountryTimes(data: PostApiLocationServiceCountryTimesData = {}): CancelablePromise<PostApiLocationServiceCountryTimesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/country-times',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCountryTimesById(data: GetApiLocationServiceCountryTimesByIdData): CancelablePromise<GetApiLocationServiceCountryTimesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/country-times/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceCountryTimesById(data: PutApiLocationServiceCountryTimesByIdData): CancelablePromise<PutApiLocationServiceCountryTimesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/country-times/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceCountryTimesById(data: DeleteApiLocationServiceCountryTimesByIdData): CancelablePromise<DeleteApiLocationServiceCountryTimesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/country-times/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CurrencyService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCurrencies(data: GetApiLocationServiceCurrenciesData = {}): CancelablePromise<GetApiLocationServiceCurrenciesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/currencies',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceCurrencies(data: PostApiLocationServiceCurrenciesData = {}): CancelablePromise<PostApiLocationServiceCurrenciesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/currencies',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceCurrenciesById(data: GetApiLocationServiceCurrenciesByIdData): CancelablePromise<GetApiLocationServiceCurrenciesByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/currencies/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceCurrenciesById(data: PutApiLocationServiceCurrenciesByIdData): CancelablePromise<PutApiLocationServiceCurrenciesByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/currencies/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Currencies, LocationService.Currencies.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceCurrenciesById(data: DeleteApiLocationServiceCurrenciesByIdData): CancelablePromise<DeleteApiLocationServiceCurrenciesByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/currencies/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class DistrictService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Districts, LocationService.Districts.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceDistricts(data: GetApiLocationServiceDistrictsData = {}): CancelablePromise<GetApiLocationServiceDistrictsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/districts',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Districts, LocationService.Districts.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceDistricts(data: PostApiLocationServiceDistrictsData = {}): CancelablePromise<PostApiLocationServiceDistrictsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/districts',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Districts, LocationService.Districts.ViewListByCityId
     * @param data The data for the request.
     * @param data.cityId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceDistrictsGetListByCityByCityId(data: GetApiLocationServiceDistrictsGetListByCityByCityIdData): CancelablePromise<GetApiLocationServiceDistrictsGetListByCityByCityIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/districts/get-list-by-city/{cityId}',
            path: {
                cityId: data.cityId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Districts, LocationService.Districts.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceDistrictsById(data: GetApiLocationServiceDistrictsByIdData): CancelablePromise<GetApiLocationServiceDistrictsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/districts/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Districts, LocationService.Districts.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceDistrictsById(data: PutApiLocationServiceDistrictsByIdData): CancelablePromise<PutApiLocationServiceDistrictsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/districts/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Districts, LocationService.Districts.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceDistrictsById(data: DeleteApiLocationServiceDistrictsByIdData): CancelablePromise<DeleteApiLocationServiceDistrictsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/districts/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class NeighborhoodService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Neighborhoods, LocationService.Neighborhoods.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceNeighborhoods(data: GetApiLocationServiceNeighborhoodsData = {}): CancelablePromise<GetApiLocationServiceNeighborhoodsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/neighborhoods',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Neighborhoods, LocationService.Neighborhoods.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceNeighborhoods(data: PostApiLocationServiceNeighborhoodsData = {}): CancelablePromise<PostApiLocationServiceNeighborhoodsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/neighborhoods',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Neighborhoods, LocationService.Neighborhoods.ViewListByDistrictId
     * @param data The data for the request.
     * @param data.districtId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceNeighborhoodsGetListByDistrictByDistrictId(data: GetApiLocationServiceNeighborhoodsGetListByDistrictByDistrictIdData): CancelablePromise<GetApiLocationServiceNeighborhoodsGetListByDistrictByDistrictIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/neighborhoods/get-list-by-district/{districtId}',
            path: {
                districtId: data.districtId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Neighborhoods, LocationService.Neighborhoods.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceNeighborhoodsById(data: GetApiLocationServiceNeighborhoodsByIdData): CancelablePromise<GetApiLocationServiceNeighborhoodsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/neighborhoods/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Neighborhoods, LocationService.Neighborhoods.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceNeighborhoodsById(data: PutApiLocationServiceNeighborhoodsByIdData): CancelablePromise<PutApiLocationServiceNeighborhoodsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/neighborhoods/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Neighborhoods, LocationService.Neighborhoods.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceNeighborhoodsById(data: DeleteApiLocationServiceNeighborhoodsByIdData): CancelablePromise<DeleteApiLocationServiceNeighborhoodsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/neighborhoods/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RegionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.Regions, LocationService.Regions.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceRegions(data: GetApiLocationServiceRegionsData = {}): CancelablePromise<GetApiLocationServiceRegionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/regions',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Regions, LocationService.Regions.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceRegions(data: PostApiLocationServiceRegionsData = {}): CancelablePromise<PostApiLocationServiceRegionsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/regions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Regions, LocationService.Regions.ViewListByCountryId
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceRegionsGetListByCountryByCountryId(data: GetApiLocationServiceRegionsGetListByCountryByCountryIdData): CancelablePromise<GetApiLocationServiceRegionsGetListByCountryByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/regions/get-list-by-country/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Regions, LocationService.Regions.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceRegionsById(data: GetApiLocationServiceRegionsByIdData): CancelablePromise<GetApiLocationServiceRegionsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/regions/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Regions, LocationService.Regions.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceRegionsById(data: PutApiLocationServiceRegionsByIdData): CancelablePromise<PutApiLocationServiceRegionsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/regions/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Regions, LocationService.Regions.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceRegionsById(data: DeleteApiLocationServiceRegionsByIdData): CancelablePromise<DeleteApiLocationServiceRegionsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/regions/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.Regions, LocationService.Regions.GetDefault
     * @param data The data for the request.
     * @param data.countryId
     * @returns string OK
     * @throws ApiError
     */
    public getApiLocationServiceRegionsGetDefaultRegionIdByCountryId(data: GetApiLocationServiceRegionsGetDefaultRegionIdByCountryIdData): CancelablePromise<GetApiLocationServiceRegionsGetDefaultRegionIdByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/regions/get-default-regionId/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RegionalSettingService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** LocationService.RegionalSettings, LocationService.RegionalSettings.ViewList
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceRegionalSettings(data: GetApiLocationServiceRegionalSettingsData = {}): CancelablePromise<GetApiLocationServiceRegionalSettingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/regionalSettings',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.RegionalSettings, LocationService.RegionalSettings.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiLocationServiceRegionalSettings(data: PostApiLocationServiceRegionalSettingsData = {}): CancelablePromise<PostApiLocationServiceRegionalSettingsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/location-service/regionalSettings',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.RegionalSettings, LocationService.RegionalSettings.View
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiLocationServiceRegionalSettingsById(data: GetApiLocationServiceRegionalSettingsByIdData): CancelablePromise<GetApiLocationServiceRegionalSettingsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/location-service/regionalSettings/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.RegionalSettings, LocationService.RegionalSettings.Edit
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiLocationServiceRegionalSettingsById(data: PutApiLocationServiceRegionalSettingsByIdData): CancelablePromise<PutApiLocationServiceRegionalSettingsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/location-service/regionalSettings/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** LocationService.RegionalSettings, LocationService.RegionalSettings.Delete
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiLocationServiceRegionalSettingsById(data: DeleteApiLocationServiceRegionalSettingsByIdData): CancelablePromise<DeleteApiLocationServiceRegionalSettingsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/location-service/regionalSettings/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}